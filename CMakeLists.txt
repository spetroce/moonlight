cmake_minimum_required(VERSION 3.5.1)
# Assembler files (.s) in the source list are ignored by CMake unless we
# “enable” the assembler by telling CMake in the project definition that we’re
# using assembly files.
project(MOONLIGHT_FW C ASM)
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)

set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Configs" FORCE)
if("${CMAKE_BUILD_TYPE}" STREQUAL "")
  message(STATUS "CMAKE_BUILD_TYPE was not set. Giving default value: Release")
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE Release)
endif()

set(MCU_FAMILY "STM32F0xx")
set(MCU_LINKER_SCRIPT "${CMAKE_CURRENT_LIST_DIR}/STM32F072RBTx_FLASH.ld")
set(MCU_STARTUP_SCRIPT "${CMAKE_CURRENT_LIST_DIR}/startup_stm32f072xb.s")

# The source code under Drivers was generated by STMCubeMX, which was
# configured to only insert necessary driver code under the Drivers directory.
# So it's safe to just glob everything under Drivers.
file(GLOB_RECURSE DRIVER_SOURCES "${CMAKE_CURRENT_LIST_DIR}/Drivers/*.c")
file(GLOB_RECURSE USER_SOURCES "${CMAKE_CURRENT_LIST_DIR}/Src/*.c")
set(SOURCES ${DRIVER_SOURCES}
            ${USER_SOURCES}
            "${MCU_STARTUP_SCRIPT}")

include_directories("${CMAKE_CURRENT_LIST_DIR}/Inc")
include_directories("${CMAKE_CURRENT_LIST_DIR}/Drivers/CMSIS/Device/ST/${MCU_FAMILY}/Include")
include_directories("${CMAKE_CURRENT_LIST_DIR}/Drivers/CMSIS/Include")
include_directories("${CMAKE_CURRENT_LIST_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc")
include_directories("${CMAKE_CURRENT_LIST_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc/Legacy")

set(TOOLCHAIN_PREFIX arm-none-eabi-)
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_OBJCOPY ${TOOLCHAIN_PREFIX}objcopy)
set(CMAKE_SIZE_UTIL ${TOOLCHAIN_PREFIX}size)

# The definitions and flags below were copied from .mk files generated by an STM32CubeIDE version of this project.
add_definitions(-DUSE_HAL_DRIVER)
add_definitions(-DSTM32F072xB)

set(MCU_FLAGS "-mcpu=cortex-m0 -mthumb")
set(CMAKE_C_FLAGS "${MCU_FLAGS} -Wall -fdata-sections -ffunction-sections")
set(CMAKE_ASM_FLAGS "-x assembler")
set(CMAKE_C_FLAGS_RELEASE "-Os -DNDEBUG")
set(CMAKE_C_FLAGS_DEBUG "-Og -g -gdwarf-2")
set(CMAKE_EXE_LINKER_FLAGS "${MCU_FLAGS} -specs=nano.specs -T${MCU_LINKER_SCRIPT} -lc -lm -lnosys -Wl,-Map=${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWER}.map,--cref -Wl,--gc-sections")

set(ELF_TARGET_NAME "${PROJECT_NAME_LOWER}.elf")
set(BIN_FILE_NAME "${PROJECT_NAME_LOWER}.bin")
set(HEX_FILE_NAME "${PROJECT_NAME_LOWER}.hex")

add_executable("${ELF_TARGET_NAME}" ${SOURCES})

set(BIN_DIR ${CMAKE_CURRENT_BINARY_DIR})
add_custom_command(
  TARGET ${ELF_TARGET_NAME}
  POST_BUILD
  COMMAND ${CMAKE_OBJCOPY} -Obinary "${BIN_DIR}/${ELF_TARGET_NAME}" "${BIN_DIR}/${BIN_FILE_NAME}"
  COMMAND ${CMAKE_OBJCOPY} -Oihex "${BIN_DIR}/${ELF_TARGET_NAME}" "${BIN_DIR}/${HEX_FILE_NAME}"
  COMMENT "Generating binary file ${BIN_FILE_NAME} and hex file ${HEX_FILE_NAME} from ${ELF_FILE_NAME}")

install(CODE "execute_process(COMMAND st-flash write ${BIN_DIR}/${BIN_FILE_NAME} 0x8000000)")
